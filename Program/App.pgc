#include "App.h"

EXEC SQL BEGIN DECLARE SECTION ;
int result;
char sql_user[100];
char sql_password[100];
char function_params[20][999];
int function_int_params[10];
EXEC SQL END DECLARE SECTION ;

int main()
{
	waitForLogin();
	doMainMenuLoop();
	
  	EXEC SQL DISCONNECT;
  	return 0;
}

void waitForLogin()
{
    struct termios oldt, newt;

    //Retrieve default settings
    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;

    //Disable echo flag
    newt.c_lflag &= ~(ECHO);

	for(;;)
	{
		printf("Enter username: ");
		scanf("%99s", sql_user);

		//Hide input
		tcsetattr(STDIN_FILENO, TCSANOW, &newt);

		printf("Enter password: ");
		scanf("%99s", sql_password);

		EXEC SQL CONNECT TO studentu@pgsql3.mif USER :sql_user USING :sql_password;
		
		if(SQLCODE == 0)
		{
			memset(sql_password, 0, sizeof(sql_password));
			//Re-enable input
			tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
			break;
		}
		else
		{
			printf("Failed to connect with SQLCODE %ld. Try again.\n", SQLCODE);
			//Re-enable input
			tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
		}
	}
}

void doMainMenuLoop()
{
	repaintStartMenu();
	
	for(;;)
	{
		if(linux_kbhit())
		{
			char keyPressed = linux_getch();

			switch(keyPressed)
			{
				case '1':
					repaintCreateMenuLoop();
					break;
				case '2':
					repaintViewMenuLoop();
					break;
				case '3':
					repaintUpdateMenuLoop();
					break;
				case '4':
					redrawDeleteMenuLoop();
					break;
				case '0':
					return;
			}

			repaintStartMenu();
		}
	}
}

void repaintStartMenu()
{
	system("clear");
	printf("Welcome to the airport management system! What would you like to do today?\n");
	printf("1 - Add new entry to the database\n");
	printf("2 - Select entries from the database\n");
	printf("3 - Update existing entries in the database\n");
	printf("4 - Delete an entry from the database\n");
	printf("0 - Exit the application\n");
}

void repaintCreateMenuLoop()
{
	repaintCreateMenu();
	for(;;)
	{
		if(linux_kbhit())
		{
			char keyPressed = linux_getch();

			switch(keyPressed)
			{
				case '1':
					addNewPassenger();
					break;
				case '2':
					addNewEmployee();
					break;
				case '3':
					addNewPilot();
					break;
				case '4':
					addNewFlight();
					break;
				case '5':
					addNewAirplane();
					break;
				case '6':
					addNewAirport();
					break;
				case '7':
					addNewRoute();
					break;
				case '8':
					purchaseTicket();
					break;
				case '0':
					return;
				default:
					continue;
			}
			
			repaintCreateMenu();
		}
	}
}

void repaintCreateMenu()
{
	system("clear");
	printf("Choose an option:\n");
	printf("1 - Add a new passenger\n");
	printf("2 - Add a new employee\n");
	printf("3 - Add a new pilot\n");
	printf("4 - Add a new flight\n");
	printf("5 - Add a new airplane\n");
	printf("6 - Add a new airport\n");
	printf("7 - Add a new route\n");
	printf("8 - Purchase tickets\n");
	printf("0 - Return to main menu\n");
}

void readPersonData()
{
	printf("Enter person id: ");
	scanf("%99s", function_params[0]);

	printf("Enter person first name: ");
	scanf("%99s", function_params[1]);

	printf("Enter person last name: ");
	scanf("%99s", function_params[2]);
	
	printf("Enter person date of birth: ");
	scanf("%99s", function_params[3]);

	printf("Enter person phone number: ");
	scanf("%99s", function_params[4]);
	
	printf("Enter person email: ");
	scanf("%99s", function_params[5]);
}

void readPassengerData()
{
	readPersonData();

	printf("Enter passenger balance: ");
	scanf("%d", &function_int_params[0]);
}

void readEmployeeData()
{
	readPersonData();

	printf("Enter employee position: ");
	scanf("%99s", function_params[6]);

	printf("Enter employee date of hire: ");
	scanf("%99s", function_params[7]);
}

void readPilotData()
{
	readEmployeeData();

	printf("Enter pilot license number: ");
	scanf("%99s", function_params[8]);

	printf("Enter pilot license issue date: ");
	scanf("%99s", function_params[9]);

	printf("Enter pilot license expiration date: ");
	scanf("%99s", function_params[10]);
}

void addNewPassenger()
{
	readPassengerData();

	EXEC SQL SELECT register_passenger(:function_params[0], :function_params[1], :function_params[2], :function_params[3], :function_params[4], :function_params[5], :function_int_params[0]) INTO :result;
	verifyOperationSuccess();
}

void addNewEmployee()
{
	readEmployeeData();

	EXEC SQL SELECT register_employee(:function_params[0], :function_params[1], :function_params[2], :function_params[3], :function_params[4], :function_params[5], :function_params[6], :function_params[7]) INTO :result;
	verifyOperationSuccess();
}

void addNewPilot()
{
	readPilotData();

	EXEC SQL SELECT register_pilot(:function_params[0], :function_params[1], :function_params[2], :function_params[3], :function_params[4], :function_params[5], :function_params[6], :function_params[7], :function_params[8], :function_params[9], :function_params[10]) INTO :result;
	verifyOperationSuccess();
}

void addNewFlight()
{
	printf("Enter departure time: ");
	scanf("%99s", function_params[0]);
	
	printf("Enter arrival time: ");
	scanf("%99s", function_params[1]);

	viewRouteDetails();
	printf("Enter route ID: ");
	scanf("%d", &function_int_params[0]);


	printf("Enter airplane ID: ");
	scanf("%d", &function_int_params[1]);

	printf("Enter pilot ID: ");
	scanf("%99s", &function_params[2]);

	printf("Enter copilot ID: ");
	scanf("%99s", &function_params[3]);

	EXEC SQL SELECT create_flight(:function_params[0], :function_params[1], :function_int_params[0], :function_int_params[1], :function_params[2], :function_params[3]) INTO :result;
	verifyOperationSuccess();
}

void addNewAirplane()
{
	printf("Enter seat count: ");
	scanf("%d", &function_int_params[0]);
	
	printf("Enter ticket price: ");
	scanf("%d", &function_int_params[1]);

	printf("Enter registration number: ");
	scanf("%99s", function_params[0]);

	EXEC SQL SELECT add_airplane(:function_int_params[0], :function_int_params[1], :function_params[0]) INTO :result;
	verifyOperationSuccess();
}

void addNewAirport()
{
	printf("Enter airport name: ");
	scanf("%99s", function_params[0]);

	printf("Enter city name: ");
	scanf("%99s", function_params[1]);

	EXEC SQL SELECT add_airport(:function_params[0], :function_params[1]) INTO :result;
	verifyOperationSuccess();
}

void addNewRoute()
{
	printf("Enter departure airport ID: ");
	scanf("%d", &function_int_params[0]);

	printf("Enter destination airport ID: ");
	scanf("%d", &function_int_params[1]);

	EXEC SQL SELECT create_route(:function_int_params[0], :function_int_params[1]) INTO :result;
	verifyOperationSuccess();
}

void purchaseTicket()
{
	printf("Enter person ID: ");
	scanf("%99s", function_params[0]);

	printf("Enter ticket ID: ");
	scanf("%d", &function_int_params[0]);

	EXEC SQL SELECT purchase_ticket(:function_params[0], :function_int_params[0]) INTO :result;
	verifyOperationSuccess();	
}

void repaintViewMenuLoop()
{
	system("clear");
	printf("Choose an option:\n");
	printf("1 - View all passenger details.\n");
	printf("2 - View all employee details.\n");
	printf("3 - Show banned passengers.\n");
	printf("4 - Show flights that have not yet sold out.\n");
	printf("5 - Show all owned ticket details.\n");
	printf("0 - Return to main menu.\n");

	for(;;)
	{
		if(linux_kbhit())
		{
			char keyPressed = linux_getch();

			switch(keyPressed)
			{
				case '1':
					viewPassengerDetails();
					break;
				case '2':
					viewEmployeeDetails();
					break;
				case '3':
					viewBannedPassengerDetails();
					break;
				case '4':
					viewNotSoldOutFlights();
					break;
				case '5':
					viewTicketDetails();
					break;
				case '0':
					return;
				default:
					continue;
			}

			repaintViewMenuLoop();
		}
	}
}

void printPassengerTableHeader()
{
	centerText("PersonID", 12);
	printf(" |");
	centerText("FirstName", 66);
	printf(" |");
	centerText("LastName", 66);
	printf("|");
	centerText("DateOfBirthDay", 16);
	printf("|");
	centerText("PhoneNumber", 16);
	printf(" |");
	centerText("Email", 66);
	printf(" |");
	centerText("Balance", 12);
	printf(" |");
	centerText("IsBanned", 10);
	printf("|");
	centerText("Discount", 12);
	printf("|");
	
	printf("\n");
}

void printPassengerTableDetails()
{
	//PersonID
	modifyString(function_params[0], 11);
	printf(" %11s |", function_params[0]);

	//FirstName
	modifyString(function_params[1], 64);
	printf(" %64s |", function_params[1]);
	
	//LastName
	modifyString(function_params[2], 64);
	printf(" %64s |", function_params[2]);

	//DateOfBirthDay
	modifyString(function_params[3], 14);
	printf(" %14s |", function_params[3]);

	//PhoneNumber
	modifyString(function_params[4], 14);
	printf(" %14s |", function_params[4]);

	//Email
	modifyString(function_params[5], 64);
	printf(" %64s |", function_params[5]);

	//Balance
	modifyString(function_params[6], 10);
	printf(" %10s |", function_params[6]);

	//IsBanned
	modifyString(function_params[7], 8);
	printf(" %8s |", function_params[7]);

	//Discount
	modifyString(function_params[8], 10);
	printf(" %10s |", function_params[8]);

	printf("\n");
}

void viewPassengerDetails()
{
	EXEC SQL SELECT COUNT(*) INTO :result FROM Passenger;

	EXEC SQL DECLARE passengerIndex CURSOR FOR
		SELECT * FROM PassengerDetails;
	EXEC SQL OPEN passengerIndex;

	printPassengerTableHeader();

	for(int i = 0; i < result; ++i)
	{
		EXEC SQL FETCH passengerIndex INTO :function_params[0], :function_params[1], :function_params[2], :function_params[3], :function_params[4], :function_params[5], :function_params[6], :function_params[7], :function_params[8];
		printPassengerTableDetails();
	}
	EXEC SQL CLOSE passengerIndex;

	verifyOperationSuccess();
}

void viewBannedPassengerDetails()
{
	EXEC SQL SELECT COUNT(*) INTO :result FROM Passenger WHERE Passenger.isBanned = true;

	EXEC SQL DECLARE bannedPassengerIndex CURSOR FOR
		SELECT * FROM BannedPassengers;
	EXEC SQL OPEN bannedPassengerIndex;

	printPassengerTableHeader();

	for(int i = 0; i < result; ++i)
	{
		EXEC SQL FETCH bannedPassengerIndex INTO :function_params[0], :function_params[1], :function_params[2], :function_params[3], :function_params[4], :function_params[5], :function_params[6], :function_params[7], :function_params[8];
		printPassengerTableDetails();
	}
	EXEC SQL CLOSE bannedPassengerIndex;

	verifyOperationSuccess();
}


void viewEmployeeDetails()
{
	EXEC SQL SELECT COUNT(*) INTO :result FROM Employee;

	EXEC SQL DECLARE employeeIndex CURSOR FOR
		SELECT * FROM EmployeeDetails;
	EXEC SQL OPEN employeeIndex;

	centerText("PersonID", 12);
	printf(" |");
	centerText("FirstName", 66);
	printf(" |");
	centerText("LastName", 66);
	printf("|");
	centerText("DateOfBirthDay", 16);
	printf("|");
	centerText("PhoneNumber", 16);
	printf(" |");
	centerText("Email", 66);
	printf(" |");
	centerText("Position", 66);
	printf("|");
	centerText("HireDate", 16);
	printf("|");

	printf("\n");
	for(int i = 0; i < result; ++i)
	{
		EXEC SQL FETCH employeeIndex INTO :function_params[0], :function_params[1], :function_params[2], :function_params[3], :function_params[4], :function_params[5], :function_params[6], :function_params[7];

		//PersonID
		modifyString(function_params[0], 11);
		printf(" %11s |", function_params[0]);

		//FirstName
		modifyString(function_params[1], 64);
		printf(" %64s |", function_params[1]);
		
		//LastName
		modifyString(function_params[2], 64);
		printf(" %64s |", function_params[2]);

		//DateOfBirthDay
		modifyString(function_params[3], 14);
		printf(" %14s |", function_params[3]);

		//PhoneNumber
		modifyString(function_params[4], 14);
		printf(" %14s |", function_params[4]);

		//Email
		modifyString(function_params[5], 64);
		printf(" %64s |", function_params[5]);

		//Position
		modifyString(function_params[6], 64);
		printf(" %64s |", function_params[6]);

		//HireDate
		modifyString(function_params[7], 14);
		printf(" %14s |", function_params[7]);

		printf("\n");
	}
	EXEC SQL CLOSE employeeIndex;

	verifyOperationSuccess();
}

void viewNotSoldOutFlights()
{
	EXEC SQL SELECT COUNT(*) INTO :result FROM FlightsNotSoldOut;

	EXEC SQL DECLARE flightNotSoldOutIndex CURSOR FOR
		SELECT * FROM FlightsNotSoldOut;
	EXEC SQL OPEN flightNotSoldOutIndex;

	centerText("FlightID", 12);
	printf("|");

	centerText("AirplaneID", 12);
	printf("|");
	
	printf ("\n");

	for(int i = 0; i < result; ++i)
	{
		EXEC SQL FETCH flightNotSoldOutIndex INTO :function_params[0], :function_params[1];

		//FlightID
		modifyString(function_params[0], 10);
		printf(" %10s |", function_params[0]);
		
		//AirplaneID
		modifyString(function_params[1], 10);
		printf(" %10s |", function_params[1]);

		printf("\n");
	}

	EXEC SQL CLOSE flightNotSoldOutIndex;
	verifyOperationSuccess();
}

void viewRouteDetails()
{
	EXEC SQL SELECT COUNT(*) INTO :result FROM RouteDetails;
	
	EXEC SQL DECLARE routeIndex CURSOR FOR
		SELECT * FROM RouteDetails;
	EXEC SQL OPEN routeIndex;

	centerText("RouteID", 12);
	printf(" |");

	centerText("Departure airport", 66);
	printf("|");
	
	centerText("Destination Airport", 66);
	printf("|");

	printf("\n");
	for(int i = 0; i < result; ++i)
	{
		EXEC SQL FETCH routeIndex INTO :function_params[19], :function_params[18], :function_params[17];

		//RouteID
		modifyString(function_params[0], 11);
		printf(" %11s |", function_params[19]);

		//ArrivalAirport
		modifyString(function_params[1], 64);
		printf(" %32s |", function_params[18]);
		
		//DestinationAirport
		modifyString(function_params[2], 64);
		printf(" %32s |", function_params[17]);

		printf("\n");
	}
	EXEC SQL CLOSE routeIndex;

	verifyOperationSuccessAlternative();

}

void viewTicketDetails()
{
	EXEC SQL SELECT COUNT(*) INTO :result FROM TicketDetails;

	EXEC SQL DECLARE ticketIndex CURSOR FOR
		SELECT * FROM TicketDetails;
	EXEC SQL OPEN ticketIndex;

	centerText("TicketID", 12);
	printf("|");

	centerText("Price", 12);
	printf(" |");

	centerText("SeatID", 12);
	printf("|");

	centerText("PersonID", 12);
	printf("|");
	
	centerText("FirstName", 66);
	printf(" |");

	centerText("LastName", 66);
	printf("|");

	centerText("DateOfBirthDay", 16);
	printf("|");
	
	centerText("FlightID", 12);
	printf(" |");

	centerText("DepartureTime", 34);
	printf("|");

	centerText("ArrivalTime", 34);
	printf("|");
	
	centerText("IsCancelled", 14);
	printf(" |");

	centerText("SeatCount", 12);
	printf(" |");
	
	centerText("TicketPrice", 14);
	printf(" |");
	
	centerText("DepartureAirport", 18);
	printf("|");
	
	centerText("DestinationAirport", 20);
	printf("|");
	
	printf("\n");
	for(int i = 0; i < result; ++i)
	{
		EXEC SQL FETCH ticketIndex INTO :function_params[0], :function_params[1],
										:function_params[2], :function_params[3],
										:function_params[4], :function_params[5],
										:function_params[6], :function_params[7],
										:function_params[8], :function_params[9],
										:function_params[10], :function_params[11],
										:function_params[12], :function_params[13],
										:function_params[14];

		//TicketID
		modifyString(function_params[0], 10);
		printf(" %10s |", function_params[0]);
		
		//Price
		modifyString(function_params[1], 10);
		printf(" %10s |", function_params[1]);
		
		//SeatID
		modifyString(function_params[2], 10);
		printf(" %10s |", function_params[2]);
		
		//PersonID
		modifyString(function_params[3], 10);
		printf(" %10s |", function_params[3]);
		
		//FirstName
		modifyString(function_params[4], 64);
		printf(" %64s |", function_params[4]);
		
		//LastName
		modifyString(function_params[5], 64);
		printf(" %64s |", function_params[5]);
		
		//DateOfBirthDay
		modifyString(function_params[6], 14);
		printf(" %14s |", function_params[6]);
		
		//FlightID
		modifyString(function_params[7], 11);
		printf(" %11s |", function_params[7]);
		
		//DepartureTime
		modifyString(function_params[8], 31);
		printf(" %11s |", function_params[8]);
		
		//ArrivalTime
		modifyString(function_params[9], 31);
		printf(" %11s |", function_params[9]);
		
		//IsCancelled
		modifyString(function_params[10], 12);
		printf(" %12s |", function_params[10]);
		
		//SeatCount
		modifyString(function_params[11], 10);
		printf(" %10s |", function_params[11]);
		
		//TicketPrice
		modifyString(function_params[12], 12);
		printf(" %12s |", function_params[12]);
		
		//DepartureAirport
		modifyString(function_params[13], 16);
		printf(" %16s |", function_params[13]);
		
		//DestinationAirport
		modifyString(function_params[14], 18);
		printf(" %18s |", function_params[14]);

		printf("\n");
	}

	EXEC SQL CLOSE ticketIndex;
	verifyOperationSuccess();
}

void repaintUpdateMenuLoop()
{
	system("clear");
	printf("Choose an option:\n");
	printf("1 - Update an airplane\n");
	printf("2 - Update an airport\n");
	printf("3 - Update a route\n");
	printf("0 - Return to main menu\n");

	for(;;)
	{
		if(linux_kbhit())
		{
			char keyPressed = linux_getch();

			switch(keyPressed)
			{
				case '1':
					updateAirplane();
					break;
				case '2':
					updateAirport();
					break;
				case '3':
					updateRoute();
					break;
				case '0':
					return;
				default:
					continue;
			}

			repaintUpdateMenuLoop();
		}
	}
}

void updateAirplane()
{
	printf("Enter airplane ID: ");
	scanf("%d", &function_int_params[0]);

	printf("Enter new seat count: ");
	scanf("%d", &function_int_params[1]);

	EXEC SQL SELECT update_airplane(:function_int_params[0], :function_int_params[1]) INTO :result;
	verifyOperationSuccess();
}

void updateAirport()
{
	printf("Enter airport ID: ");
	scanf("%d", &function_int_params[0]);

	printf("Enter new airport name: ");
	scanf("%99s", function_params[0]);
	
	printf("Enter new city name: ");
	scanf("%99s", function_params[1]);

	EXEC SQL SELECT update_airport(:function_int_params[0], :function_params[0], :function_params[1]) INTO :result;
	verifyOperationSuccess();
}

void updateRoute()
{
	printf("Enter route ID: ");
	scanf("%d", &function_int_params[0]);

	printf("Enter new departure airport ID: ");
	scanf("%d", &function_int_params[1]);

	printf("Enter new destination airport ID: ");
	scanf("%d", &function_int_params[2]);

	EXEC SQL SELECT update_route(:function_int_params[0], :function_int_params[1], :function_int_params[2]) INTO :result;
	verifyOperationSuccess();
}

void redrawDeleteMenuLoop()
{
	system("clear");
	printf("Choose an option:\n");
	printf("1 - Ban a passenger\n");
	printf("2 - Cancel a flight\n");
	printf("0 - Return to main menu\n");

	for(;;)
	{
		if(linux_kbhit())
		{
			char keyPressed = linux_getch();

			switch(keyPressed)
			{
				case '1':
					banPassenger();
					break;
				case '2':
					cancelFlight();
					break;
				case '0':
					return;
				default:
					continue;
			}

			redrawDeleteMenuLoop();
		}
	}
}

void banPassenger()
{
	printf("Enter person ID: ");
	scanf("%99s", function_params[0]);

	EXEC SQL SELECT ban_passenger(:function_params[0]) INTO :result;
	verifyOperationSuccess();
}

void cancelFlight()
{
	printf("Enter flight ID: ");
	scanf("%d", &function_int_params[0]);

	EXEC SQL SELECT cancel_flight(:function_int_params[0]) INTO :result;
	verifyOperationSuccess();
}

void verifyOperationSuccess()
{
    if(SQLCODE == 0)
	{
		EXEC SQL COMMIT;
		printf("Operation completed! Press any key to continue");
		fflush(stdout);
		waitForKeyPress();
	}
	else
	{
		printf("Failed to complete operation!");
		printError();
		printf("Press any key to continue");
		waitForKeyPress();
	}
}

void waitForKeyPress()
{
	while(1)
	{
		if(linux_kbhit())
		{
			break;
		}
	}
}
void verifyOperationSuccessAlternative()
{
    if(SQLCODE != 0)
	{
		printf("Failed to complete operation!");
		printError();
	}
}

void printError()
{
	if(DEBUG_MODE)
	{
		fprintf(stderr, "==== sqlca ====\n");
		fprintf(stderr, "sqlcode: %ld\n", sqlca.sqlcode);
		fprintf(stderr, "sqlerrm.sqlerrml: %d\n", sqlca.sqlerrm.sqlerrml);
		fprintf(stderr, "sqlerrm.sqlerrmc: %s\n", sqlca.sqlerrm.sqlerrmc);
		fprintf(stderr, "sqlerrd: %ld %ld %ld %ld %ld %ld\n", sqlca.sqlerrd[0],sqlca.sqlerrd[1],sqlca.sqlerrd[2],
															sqlca.sqlerrd[3],sqlca.sqlerrd[4],sqlca.sqlerrd[5]);
		fprintf(stderr, "sqlwarn: %d %d %d %d %d %d %d %d\n", sqlca.sqlwarn[0], sqlca.sqlwarn[1], sqlca.sqlwarn[2],
															sqlca.sqlwarn[3], sqlca.sqlwarn[4], sqlca.sqlwarn[5],
															sqlca.sqlwarn[6], sqlca.sqlwarn[7]);
		fprintf(stderr, "sqlstate: %5s\n", sqlca.sqlstate);
		fprintf(stderr, "===============\n");
		exit(-1);
	}
}